{"version":3,"sources":["Services/Axios/apiUtils.ts","Services/Axios/axiosConnectService.ts","Services/Storage/LocalStorageService.ts","Components/Web/Header/HeaderBar.tsx","Services/JSON/JsonService.ts","Components/Web/Header/Pages/AccountView.tsx","Components/Web/Header/Pages/IndexView.tsx","Components/Topsoft.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["handleError","error","response","console","log","data","status","headers","request","message","config","axiosClient","axios","create","baseURL","loginPost","post","catch","verifyToken","registerPost","user","LocalStorageService","localStorage","getItem","value","setItem","removeItem","token","Instance","HeaderBar","props","jsonService","JsonService","getInstance","localStorageService","wrapper","useRef","useState","openLogin","setOpenLogin","openRegister","setOpenRegister","loginUsername","setLoginUsername","loginPassword","setLoginPassword","loginRememberMe","setLoginRememberMe","registerUsername","setRegisterUsername","registerPassword","setRegisterPassword","registerConfirmPassword","setRegisterConfirmPassword","registerEmail","setRegisterEmail","setCurrentLanguage","handleClose","React","useEffect","window","addEventListener","navbar","document","getElementById","Fragment","className","to","style","textDecoration","color","getTextInLang","onClick","show","onHide","ref","Header","closeButton","Title","Body","method","id","action","API","host","Group","controlId","Label","Control","type","onChange","e","target","placeholder","Check","checked","label","Footer","variant","Authorization","Buffer","from","toString","RememberMe","then","client","setUser","logInUser","handleLoginSubmit","username","password","confirmPassword","emailAddress","handleLoginRegister","key","MainLanguageJson","getCurrentOrDefaultLanguage","AccountView","IndexView","Topsoft","fetch","setFetch","undefined","isMobile","test","navigator","userAgent","language","path","component","exact","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.64a10223.chunk.js","sourcesContent":["export const handleError = (error: any) => {\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      console.log(error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n      // http.ClientRequest in node.js\r\n      console.log(error.request);\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log(\"Error\", error.message);\r\n    }\r\n    console.log(error.config);\r\n  };","import axios from \"axios\";\r\nimport { UserRegisterCredentials } from \"../../Models/User/UserRegisterCredentials\";\r\nimport { handleError } from './apiUtils';\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL:\"https://localhost:44376/api\"\r\n});\r\n\r\nexport const loginGet = ()=>axiosClient.get(\"Account/Login\").catch(handleError);\r\nexport const loginPost = (headers:any) => axiosClient.post(\"Account/Login\",null,{headers:headers}).catch(handleError);\r\n\r\nexport const verifyToken = (headers:any)=>axiosClient.post(\"Account/VerifyToken\",null,{headers}).catch(handleError);\r\n\r\nexport const registerPost = (user:UserRegisterCredentials)=>axiosClient.post(\"Account/Register\",user).catch(handleError);\r\n","export class LocalStorageService{\r\n    private static Instance:LocalStorageService;\r\n    private LocalStorage(){}\r\n\r\n    public static getInstance(){\r\n        if(!LocalStorageService.Instance){\r\n            LocalStorageService.Instance = new LocalStorageService();\r\n        }\r\n\r\n        return LocalStorageService.Instance;\r\n    }\r\n\r\n\r\n    //#region Languages\r\n\r\n    public getCurrentOrDefaultLanguage(){\r\n        return localStorage.getItem(\"topsoft_currentLanguage\") ?? \"en\";\r\n    }\r\n\r\n    public setCurrentLanguage(value:string){\r\n        localStorage.setItem(\"topsoft_currentLanguage\",value);\r\n    }\r\n\r\n\r\n    public logOutUser(){\r\n        localStorage.removeItem(\"topsoft_token\");\r\n    }\r\n\r\n    public logInUser(token:string){\r\n        localStorage.setItem(\"topsoft_token\", token);\r\n    }\r\n    \r\n    //#endregion\r\n\r\n    \r\n}","import React, {useEffect, useRef} from \"react\";\r\nimport {useState} from \"react\";\r\nimport {Button, Container, Form, FormControl, Modal, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\n\r\nimport API from \"../../../Content/API/API.json\"\r\nimport {loginPost, registerPost} from '../../../Services/Axios/axiosConnectService';\r\nimport {User} from \"../../../Models/User\";\r\nimport { JsonService } from '../../../Services/JSON/JsonService';\r\nimport { UserRegisterCredentials } from \"../../../Models/User/UserRegisterCredentials\";\r\nimport { LocalStorageService } from \"../../../Services/Storage/LocalStorageService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\ntype HeaderBarProps = {\r\n    language: String,\r\n    setLanguage?: Function,\r\n    user?: User,\r\n    setUser: React.Dispatch < React.SetStateAction < User | undefined >>\r\n}\r\n\r\nexport const HeaderBar = (props : HeaderBarProps) => {\r\n\r\n    const jsonService = JsonService.getInstance();\r\n    const localStorageService = LocalStorageService.getInstance();\r\n\r\n    const wrapper = useRef(\"idk\");\r\n    \r\n    // const [openRegister, setOpenRegister] = useState(false);\r\n    const [openLogin, setOpenLogin] = useState < boolean > (false);\r\n    const [openRegister, setOpenRegister] = useState<boolean>(false);\r\n\r\n    const [loginUsername, setLoginUsername] = useState < string > (\"\");\r\n    const [loginPassword, setLoginPassword] = useState < string > (\"\");\r\n    const [loginRememberMe, setLoginRememberMe] = useState < boolean > (false);\r\n\r\n    const [registerUsername,setRegisterUsername] = useState<string>(\"\");\r\n    const [registerPassword,setRegisterPassword] = useState<string>(\"\");\r\n    const [registerConfirmPassword,setRegisterConfirmPassword] = useState<string>(\"\");\r\n    const [registerEmail,setRegisterEmail] = useState<string>(\"\");\r\n\r\n\r\n   localStorageService.setCurrentLanguage(\"ro\");\r\n\r\n\r\n    const handleClose = () => {\r\n        setOpenLogin(false);\r\n        setOpenRegister(false);\r\n    }\r\n    const handleLoginSubmit = () => {\r\n\r\n        var encodedString = Buffer.from(`${loginUsername}:${loginPassword}`).toString('base64')\r\n        var headers = {\r\n            Authorization: \"Basic \" + encodedString,\r\n            RememberMe: loginRememberMe\r\n        }\r\n\r\n        loginPost(headers).then((response: any) => {\r\n            if (response && response.status == 200) {\r\n                var client = response.data;\r\n                props.setUser(client as User);\r\n                localStorageService.logInUser(client.token);\r\n                handleClose();\r\n                return;\r\n            }\r\n            //TODO: Error message for error code 400 and 500\r\n        })\r\n    };\r\n\r\n    const handleLoginRegister = () => {\r\n        var user: UserRegisterCredentials = {\r\n            username: registerUsername,\r\n            password: registerPassword,\r\n            confirmPassword: registerConfirmPassword,\r\n            emailAddress: registerEmail\r\n        }\r\n        debugger;\r\n        registerPost(user).then((response: any) => {\r\n            if(response && response.status <300){\r\n                props.setUser(response.data);\r\n            localStorageService.logInUser(response.data.token);\r\n            handleClose();\r\n            return;\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        function handleResize() {\r\n            var navbar = document.getElementById(\"navbarScroll\");\r\n            if(navbar){\r\n                console.log(navbar);\r\n            }\r\n            \r\n        \r\n    }\r\n    \r\n        window.addEventListener('resize', handleResize)\r\n      })\r\n\r\n    const navBarSpacing = \"20rem\";\r\n    const userOptionsSpacing = \"1rem\";\r\n\r\n    \r\n\r\n    return <React.Fragment>\r\n\r\n        <div className=\"topsoft-menu\">\r\n            <Link to=\"/\" className=\"topsoftSystems32a3aea8-0\">\r\n                TopSoft Systems\r\n            </Link>\r\n\r\n            <div className=\"collapsableMenuContainer\">\r\n                <div className=\"menuContainer\">\r\n                    \r\n                    <Link to=\"/aboutUs\" className=\"menuOption\" style={{ textDecoration: 'none',color:\"white\" }}> {jsonService.getTextInLang(\"AboutUs\")}</Link>\r\n                    \r\n                    <Link to=\"/ourServices\" className=\"menuOption\"  style={{ textDecoration: 'none',color:\"white\" }}>\r\n                      {jsonService.getTextInLang(\"OurServices\")}\r\n                    </Link>\r\n                    <Link to=\"/contact\" className=\"menuOption\"  style={{ textDecoration: 'none',color:\"white\" }}>\r\n                        {jsonService.getTextInLang(\"Contact\")}\r\n                    </Link>\r\n                    <Link to=\"/faq\" className=\"menuOption\"  style={{ textDecoration: 'none',color:\"white\" }}>\r\n                        {jsonService.getTextInLang(\"FAQ\")}\r\n                    </Link>\r\n                </div>\r\n                <div className=\"menuContainer\">\r\n                    <div className=\"menuOption\" onClick={()=>setOpenLogin(true)}>\r\n                    {jsonService.getTextInLang(\"Login\")}\r\n                    </div>\r\n\r\n                    <div className=\" menuOption menuOptionLast joinNowBtn\" onClick={()=>setOpenRegister(true)}>\r\n                    {jsonService.getTextInLang(\"JoinNow\")}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n        <Modal show={openLogin} onHide={handleClose} ref={wrapper}>\r\n            <Modal.Header closeButton>\r\n\r\n                <Modal.Title> {jsonService.getTextInLang(\"Connect\")}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form method=\"post\" id=\"loginForm\" action={API.host + \"Account/Login\" }>\r\n                    <Form.Group controlId=\"loginUsername\">\r\n                        <Form.Label>{jsonService.getTextInLang(\"Username\")}</Form.Label>\r\n                        <Form.Control type=\"text\" onChange={(e)=> setLoginUsername(e.target.value)}\r\n                            placeholder=\"Username...\"/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"loginPassword\">\r\n                        <Form.Label>{jsonService.getTextInLang(\"Password\")}</Form.Label>\r\n                        <Form.Control type=\"password\" onChange={(e)=> setLoginPassword(e.target.value)}\r\n                            placeholder=\"Password...\"/>\r\n                    </Form.Group>\r\n                    <Form.Check type=\"checkbox\" id={`rememberMe`} onChange={(e)=> setLoginRememberMe(e.target.checked)}\r\n                        label={jsonService.getTextInLang(\"KeepMeLogged\")}/>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    {jsonService.getTextInLang(\"Close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={()=> handleLoginSubmit()}>\r\n                    {jsonService.getTextInLang(\"Login\")}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal show={openRegister} onHide={handleClose} ref={wrapper}>\r\n            <Modal.Header closeButton>\r\n\r\n                <Modal.Title> {jsonService.getTextInLang(\"Register\")}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form method=\"post\" id=\"loginForm\" action={API.host + \"Account/Login\" }>\r\n                    <Form.Group controlId=\"registerUsername\">\r\n                        <Form.Label>{jsonService.getTextInLang(\"Username\")}</Form.Label>\r\n                        <Form.Control type=\"text\" onChange={(e)=> setRegisterUsername(e.target.value)}\r\n                            placeholder=\"Username...\"/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"registerPassword\">\r\n                        <Form.Label>{jsonService.getTextInLang(\"Password\")}</Form.Label>\r\n                        <Form.Control type=\"password\" onChange={(e)=> setRegisterPassword(e.target.value)}\r\n                            placeholder=\"Password...\"/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"registerConfirmPassword\">\r\n                        <Form.Label>{jsonService.getTextInLang(\"ConfirmPassword\")}</Form.Label>\r\n                        <Form.Control type=\"password\" onChange={(e)=> setRegisterConfirmPassword(e.target.value)}\r\n                            placeholder=\"Password...\"/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"registerEmailAddress\">\r\n                        <Form.Label>{jsonService.getTextInLang(\"ConfirmPassword\")}</Form.Label>\r\n                        <Form.Control type=\"text\" onChange={(e)=> setRegisterEmail(e.target.value)}\r\n                            placeholder=\"Email@test.com\"/>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    {jsonService.getTextInLang(\"Close\")}\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={()=> handleLoginRegister()}>\r\n                    {jsonService.getTextInLang(\"Register\")}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n    </React.Fragment>\r\n\r\n}","import { LocalStorageService } from './../Storage/LocalStorageService';\r\nimport MainLanguageJson from \"./../../Content/Language/LanguageMainJson.json\"\r\n\r\n\r\n\r\n\r\nexport class JsonService{\r\n    private static Instance:JsonService;\r\n    private localStorageService:LocalStorageService = LocalStorageService.getInstance();\r\n\r\n    private constructor(){ }\r\n\r\n    public static getInstance(){\r\n        if(!JsonService.Instance){\r\n            JsonService.Instance = new JsonService();\r\n        }\r\n        return JsonService.Instance;\r\n    }\r\n\r\n    public getTextInLang = (key : String) : String => {\r\n       // @ts-ignore\r\n       return MainLanguageJson[this.localStorageService.getCurrentOrDefaultLanguage()][key] as String;\r\n\r\n    }\r\n\r\n}\r\n\r\n","type AccountViewProps={\r\n\r\n}\r\n\r\nexport const AccountView = (props:AccountViewProps)=>{\r\n    return <div>\r\n        Account\r\n    </div>\r\n}","import React from \"react\"\r\nimport bg from \"../../Content/assets/christinHumeSlbqshqaheoUnsplash.png\"\r\n\r\ntype IndexViewProps = {\r\n\r\n}\r\n\r\nexport const IndexView = (props:IndexViewProps)=>{\r\n    return <React.Fragment>\r\n        \r\n    </React.Fragment>\r\n}","import {useEffect, useState} from \"react\";\r\nimport {User} from \"../Models/User\";\r\nimport {HeaderBar} from \"./Web/Header/HeaderBar\"\r\nimport {verifyToken} from '../Services/Axios/axiosConnectService';\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport { AccountView } from \"./Web/Header/Pages/AccountView\";\r\nimport { IndexView } from \"./Web/Header/Pages/IndexView\";\r\n\r\nexport const Topsoft = () => {\r\n    const [user,setUser] = useState < User > ();\r\n    const [fetch,setFetch] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"token\") !== null && fetch) {\r\n            setFetch(false);\r\n            verifyToken({\r\n                Authorization: \"Bearer \" + localStorage.getItem(\"topsoft_token\")\r\n            }).then((response : any) => {\r\n                if(response){\r\n                    if (response.status < 300) {\r\n                        setUser(response.data as User);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                setUser(undefined);\r\n    \r\n            });\r\n        }\r\n        \r\n\r\n    }, [fetch]);\r\n\r\n    var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\r\n\r\n\r\n    return <div>\r\n\r\n        {isMobile?<div></div>:<BrowserRouter>\r\n            <HeaderBar language=\"ro\" user={user} setUser={setUser}/>\r\n        <Switch>\r\n            \r\n            <Route path=\"/Account\" component={AccountView}/>\r\n            <Route exact path=\"/\" component={IndexView} />\r\n            <Route />\r\n        </Switch>\r\n        </BrowserRouter>}\r\n\r\n        \r\n        \r\n    </div>\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Topsoft } from './Components/Topsoft';\n\n\nfunction App() {\n  return (\n    \n\n      <Topsoft/>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}